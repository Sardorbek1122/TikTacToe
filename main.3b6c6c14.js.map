{"version":3,"sources":["scripts/main.js"],"names":["window","addEventListener","tiles","Array","from","document","querySelectorAll","playerDisplay","querySelector","resetButton","announcer","board","currentPlayer","isGameActive","playerX","playerO","TIE","winningConditions","announce","type","innerHTML","innerText","classList","remove","changePlayer","add","userAction","tile","index","isValidAction","updateBoard","handleResultValidation","roundWon","i","winCondition","a","b","c","includes","forEach"],"mappings":";AAAA,aAEAA,OAAOC,iBAAiB,mBAAoB,WACpCC,IAAAA,EAAQC,MAAMC,KAAKC,SAASC,iBAAiB,UAC7CC,EAAgBF,SAASG,cAAc,mBACvCC,EAAcJ,SAASG,cAAc,UACrCE,EAAYL,SAASG,cAAc,mBAErCG,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzCC,EAAgB,IAChBC,GAAe,EAEbC,EAAU,UACVC,EAAU,UACVC,EAAM,MAENC,EAAoB,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAkCHC,IAAAA,EAAW,SAACC,GACRA,OAAAA,GACDJ,KAAAA,EACHL,EAAUU,UAAY,kDACtB,MACGN,KAAAA,EACHJ,EAAUU,UAAY,kDACtB,MACGJ,KAAAA,EACHN,EAAUW,UAAY,YAE1BX,EAAUY,UAAUC,OAAO,SAevBC,EAAe,WACnBjB,EAAce,UAAUC,OAAgBX,SAAAA,OAAAA,IACxCA,EAAkC,MAAlBA,EAAwB,IAAM,IAC9CL,EAAcc,UAAYT,EAC1BL,EAAce,UAAUG,IAAab,SAAAA,OAAAA,KAGjCc,EAAa,SAACC,EAAMC,IAnBJ,SAACD,GACjBA,MAAmB,MAAnBA,EAAKN,WAAwC,MAAnBM,EAAKN,WAmB/BQ,CAAcF,IAASd,IACzBc,EAAKN,UAAYT,EACjBe,EAAKL,UAAUG,IAAab,SAAAA,OAAAA,IAdZ,SAACgB,GACnBjB,EAAMiB,GAAShB,EAcbkB,CAAYF,GApEPG,WAGF,IAFDC,IAAAA,GAAW,EAENC,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACrBC,IAAAA,EAAejB,EAAkBgB,GACjCE,EAAIxB,EAAMuB,EAAa,IACvBE,EAAIzB,EAAMuB,EAAa,IACvBG,EAAI1B,EAAMuB,EAAa,IAEzBC,GAAM,KAANA,GAAkB,KAANC,GAAkB,KAANC,GAIxBF,IAAMC,GAAKA,IAAMC,EAAG,CACtBL,GAAW,EACX,OAIAA,GAAAA,EAIF,OAHAd,EAA2B,MAAlBN,EAAwBE,EAAUC,QAC3CF,GAAe,GAKZF,EAAM2B,SAAS,KAClBpB,EAASF,GA0CTe,GACAP,MAoBJtB,EAAMqC,QAAQ,SAACZ,EAAMC,GACnBD,EAAK1B,iBAAiB,QAAS,WAAMyB,OAAAA,EAAWC,EAAMC,OAGxDnB,EAAYR,iBAAiB,QApBV,WACjBU,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzCE,GAAe,EACfH,EAAUY,UAAUG,IAAI,QAEF,MAAlBb,GACFY,IAGFtB,EAAMqC,QAAQ,SAAAZ,GACZA,EAAKN,UAAY,GACjBM,EAAKL,UAAUC,OAAO,WACtBI,EAAKL,UAAUC,OAAO","file":"main.3b6c6c14.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const tiles = Array.from(document.querySelectorAll('.tile'));\n  const playerDisplay = document.querySelector('.display-player');\n  const resetButton = document.querySelector('#reset');\n  const announcer = document.querySelector('.game__display1');\n\n  let board = ['', '', '', '', '', '', '', '', ''];\n  let currentPlayer = 'X';\n  let isGameActive = true;\n\n  const playerX = 'playerX';\n  const playerO = 'playerO';\n  const TIE = 'TIE';\n\n  const winningConditions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  function handleResultValidation() {\n    let roundWon = false;\n\n    for (let i = 0; i <= 7; i++) {\n      const winCondition = winningConditions[i];\n      const a = board[winCondition[0]];\n      const b = board[winCondition[1]];\n      const c = board[winCondition[2]];\n\n      if (a === '' || b === '' || c === '') {\n        continue;\n      }\n\n      if (a === b && b === c) {\n        roundWon = true;\n        break;\n      }\n    }\n\n    if (roundWon) {\n      announce(currentPlayer === 'X' ? playerX : playerO);\n      isGameActive = false;\n\n      return;\n    }\n\n    if (!board.includes('')) {\n      announce(TIE);\n    }\n  }\n\n  const announce = (type) => {\n    switch (type) {\n      case playerO:\n        announcer.innerHTML = 'Player <span class=\"playerO\">O</span> is Winner';\n        break;\n      case playerX:\n        announcer.innerHTML = 'Player <span class=\"playerX\">X</span> is Winner';\n        break;\n      case TIE:\n        announcer.innerText = 'Try again';\n    }\n    announcer.classList.remove('hide');\n  };\n\n  const isValidAction = (tile) => {\n    if (tile.innerText === 'X' || tile.innerText === 'O') {\n      return false;\n    }\n\n    return true;\n  };\n\n  const updateBoard = (index) => {\n    board[index] = currentPlayer;\n  };\n\n  const changePlayer = () => {\n    playerDisplay.classList.remove(`player${currentPlayer}`);\n    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';\n    playerDisplay.innerText = currentPlayer;\n    playerDisplay.classList.add(`player${currentPlayer}`);\n  };\n\n  const userAction = (tile, index) => {\n    if (isValidAction(tile) && isGameActive) {\n      tile.innerText = currentPlayer;\n      tile.classList.add(`player${currentPlayer}`);\n      updateBoard(index);\n      handleResultValidation();\n      changePlayer();\n    }\n  };\n\n  const resetBoard = () => {\n    board = ['', '', '', '', '', '', '', '', ''];\n    isGameActive = true;\n    announcer.classList.add('hide');\n\n    if (currentPlayer === 'O') {\n      changePlayer();\n    }\n\n    tiles.forEach(tile => {\n      tile.innerText = '';\n      tile.classList.remove('playerX');\n      tile.classList.remove('playerO');\n    });\n  };\n\n  tiles.forEach((tile, index) => {\n    tile.addEventListener('click', () => userAction(tile, index));\n  });\n\n  resetButton.addEventListener('click', resetBoard);\n});\n"]}